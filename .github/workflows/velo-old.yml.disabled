---
name: Velo
on:
  push:

jobs:
  generate-version:
    runs-on: ubuntu-20.04
    container:
      image: gittools/gitversion
    steps:
    - name: checkout repo
      uses: actions/checkout@v2
    - name: get entire repo
      run: git fetch --prune --unshallow --tags
    - name: generate appversion.json
      run: /tools/dotnet-gitversion > appversion.json
    - name: cat appversion contents
      run: cat appversion.json
    - name: Archive gitversion
      uses: actions/upload-artifact@v2
      with:
        name: appversion.json
        path: appversion.json
        retention-days: 1
      - name: generate release-notes
        run: |
          #!/usr/bin/env bash
          cat > releasenotes.md << EOF
          {
            "commit_id": "${GITHUB_SHA}",
            "branch_name": "${GITHUB_REF}"
          }
          EOF
    - name: Archive release-notes
      uses: actions/upload-artifact@v2
      with:
        name: releasenotes.md
        path: releasenotes.md
        retention-days: 1

  parse-version:
    needs: ["generate-version"]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: download generated appversion.json
      uses: actions/download-artifact@v2
      with:
        name: appversion.json
    - run: jq -r '.SemVer' appversion.json > appversion.txt
    - name: Archive gitversion
      uses: actions/upload-artifact@v2
      with:
        name: appversion.txt
        path: appversion.txt
        retention-days: 1

  build-and-push-image:
    needs: ['parse-version']
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.NUBE_HUB_GCR_KEY }}
        project_id: nube-hub
        export_default_credentials: true
    - run: gcloud auth configure-docker -q
    - name: download generated appversion.txt
      uses: actions/download-artifact@v2
      with:
        name: appversion.txt
    - run: |
        docker build -t eu.gcr.io/nube-hub/velo-action:$(cat appversion.txt) .
        docker tag eu.gcr.io/nube-hub/velo-action:$(cat appversion.txt) eu.gcr.io/nube-hub/velo-action:latest
    - name: Wait on CI
      uses: lewagon/wait-on-check-action@v0.2
      with:
        ref: ${{ github.ref }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10
        running-workflow-name: "build-and-push-image"
        check-name: "CI done"
    - run: |
        docker push eu.gcr.io/nube-hub/velo-action:$(cat appversion.txt)
        docker push eu.gcr.io/nube-hub/velo-action:latest

  push-deploy-artifacts:
    needs: ['build-and-push-image']
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: download generated appversion.txt
      uses: actions/download-artifact@v2
      with:
        name: appversion.txt
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.VELO_CI_KEY }}
        export_default_credentials: true
    - name: upload deploy artifacts
      run: export SEMVER=$(cat appversion.txt) && cd .deploy && gsutil cp -r . gs://nube-velo-prod-deploy-artifacts/velo-action/$SEMVER/

  create-release:
    needs: ['push-deploy-artifacts']
    runs-on: ubuntu-20.04
    container:
      image: octopusdeploy/octo
    steps:
    - name: download generated appversion.txt
      uses: actions/download-artifact@v2
      with:
        name: appversion.txt
    - name: download generated releasenotes.md
      uses: actions/download-artifact@v2
      with:
        name: releasenotes.md
    - name: create release
      run: octo create-release --project=velo-action --version=$(cat appversion.txt) --releaseNoteFile=releasenotes.md
      env:
        OCTOPUS_CLI_SERVER: ${{ secrets.VELO_CI_OCTOPUS_URL }}
        OCTOPUS_CLI_API_KEY: ${{ secrets.VELO_CI_OCTOPUS_API_KEY }}

  deploy-to-staging:
    needs: ["create-release"]
    runs-on: ubuntu-20.04
    container:
      image: octopusdeploy/octo
    steps:
    - name: download generated appversion.txt
      uses: actions/download-artifact@v2
      with:
        name: appversion.txt
    - name: deploy release
      run: octo deploy-release --project=velo-action --version=$(cat appversion.txt) --deployTo=staging
      env:
        OCTOPUS_CLI_SERVER: ${{ secrets.VELO_CI_OCTOPUS_URL }}
        OCTOPUS_CLI_API_KEY: ${{ secrets.VELO_CI_OCTOPUS_API_KEY }}

  cleanup-version-artifacts:
    needs: ["deploy-to-staging"]
    runs-on: ubuntu-20.04
    steps:
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: appversion.json
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: appversion.txt
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: releasenotes.md
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: static