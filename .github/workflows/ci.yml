name: CI
on:
  push:

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  IMAGE: eu.gcr.io/nube-hub/velo-action

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Cache environment
        id: cached_poetry
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-velo-action-${{ runner.os }}--${{ hashFiles('**/poetry.lock') }}

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9.4"
          architecture: "x64"

      - run: |
          pip install poetry==1.1.6
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - if: steps.cached_poetry.outputs.cache-hit != 'true'
        run: |
          poetry install

      - run: poetry run black --check --config=pyproject.toml .
      - run: poetry run flake8 --config='.flake8' .
      - run: poetry run pylint --rcfile=.pylintrc --fail-under=7 velo_action
      - run: poetry run mypy --config-file=.mypy.ini velo_action

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache environment
        id: cached_poetry
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-velo-action-${{ runner.os }}--${{ hashFiles('**/poetry.lock') }}

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9.4"
          architecture: "x64"

      - run: |
          pip install poetry==1.1.6
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - if: steps.cached_poetry.outputs.cache-hit != 'true'
        run: |
          poetry install

      - run: poetry run pytest . -c pytest.ini --capture=no -v -m "not docker"
        id: pytests

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # all history for all branches and tags.

      - uses: kolonialno/velo-action@split-release-deploy
        id: velo

      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.VELO_CI_KEY_PROD }}
          project_id: nube-hub
          export_default_credentials: true

      - run: |
          gcloud auth configure-docker -q
          docker build -t ${{ env.IMAGE }}:${{ steps.velo.outputs.version }} .
          docker tag ${{ env.IMAGE }}:${{ steps.velo.outputs.version }} ${{ env.IMAGE }}:latest
          docker push ${{ env.IMAGE }}

  ci-done:
    # Gather job which Velo can wait on.
    name: CI done
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
      - build
    steps:
      - run: echo "CI done!"
